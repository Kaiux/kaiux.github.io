<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零构造一台计算机——布尔代数到逻辑电路</title>
    <url>/2021/07/26/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E5%88%B0%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<p>最近在学习coursera上的一门课：<a href="https://www.coursera.org/learn/build-a-computer">Build a Modern Computer from First Principles: From Nand to Tetris</a>，我会坚持更新这一系列的博客，作为记录自己学习的过程，同时也倒逼自己去把学会的东西再讲出来，来深入理解。</p>
<p>其实我们生活中所有的电子设备都是基于<strong>逻辑门电路</strong>（后面会解释）来构造的。这是很神奇的一件事情，我在中学的时候就好奇计算机是如何完成这一些复杂的操作的，我相信很多人也都好奇过。这门课的愿景就是带我们从一个最基础的电路开始，构造出一个完整的计算机。</p>
<h2 id="布尔代数">布尔代数</h2>
<blockquote>
<p>在数学和数理逻辑中，逻辑代数（有时也称开关代数、布尔代数）是代数的一个分支，其变量的值仅为真和假两种真值（通常记作 1 和 0）。逻辑代数是乔治·布尔（George Boole）在他的第一本书《逻辑的数学分析》（1847年）中引入的，并在他的《思想规律的研究》（1854年）中更充分的提出了逻辑代数。</p>
</blockquote>
<p>这段话来自维基百科，<strong>布尔</strong>其实是一个人名，因为布尔代数就是他提出的，所以用他的名字来命名。这里不会深入讲解布尔代数，我们只讲我们用得到的部分。</p>
<p>还是以数学为例，数学中最基础的四则运算是<code>加</code>，<code>减</code>，<code>乘</code>，<code>除</code>，同样的，布尔代数也有很多计算方式，最基础的是应该是：<code>与</code>，<code>或</code>，<code>非</code>。</p>
<p>在开始讲具体的计算之前，我们需要把前提记住：<strong>布尔代数变量的值仅为真和假两种真值（通常记作 1 和 0，真为1，假为0）。</strong></p>
<h3 id="与">与</h3>
<p>因为布尔代数变量的值仅为真和假两种真值，所以我我们其实可以把所有的情况都列出来，形成一张表，这张表就是我们平时所说的<strong>真值表</strong>。</p>
<p><code>与</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x与y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>从上面也可以看出，对于<span class="math inline">\(n\)</span>个变量的真值表，会有<span class="math inline">\(2^n\)</span>种情况。</p>
<p><code>x与y</code>其实就是当<code>x</code>和<code>y</code>都是1的时候，结果为1，也就是<code>x</code>和<code>y</code>都是真的时候，结果为真。</p>
<p>你也可以有你自己的理解方式，比如我们一开始学加法的时候，老师告诉我们<code>1+1=2</code>其实就是一个苹果加一个苹果等于2个苹果。那么<code>x与y</code>你也可以这么理解：假如你想出去旅游要征询爸爸妈妈的意见，x代表爸爸的意见，x=1代表爸爸同意，y代表妈妈的意见，y=1代表妈妈同意，为0则是不同意。那么<code>与</code>的意思就是，爸爸<strong>与</strong>妈妈都同意了，才是通过。</p>
<p>我们平时表述<code>x加y</code>用符号<code>+</code>来表示：<code>x+y</code>；同样的，<code>与</code>也有它的符号：<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(x \cdot y\)</span></p>
<h3 id="或">或</h3>
<p><code>或</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x或y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>用上面的例子来说，<code>或</code>就是爸爸<strong>或</strong>妈妈同意了，就算是通过了。</p>
<p>同样地，符号表示如下：<span class="math inline">\(x\)</span>或<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(x + y\)</span></p>
<h3 id="非">非</h3>
<p><code>非</code>和上面的<code>与</code>，<code>或</code>有点不一样，真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">非x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
</tbody>
</table>
<p><code>非</code>其实就是对<code>x</code>去相反的值，从字面意思也可以理解。</p>
<p>符号表示如下：非<span class="math inline">\(x\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(\overline{x}\)</span></p>
<h3 id="与非">与非</h3>
<p><code>与非</code>的字面意思是<code>与</code>运算和<code>非</code>运算的结合。</p>
<p><code>与非</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x与非y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
</tbody>
</table>
<p><code>与非</code>就是对<code>与</code>计算出来的结果，再做<code>非</code>计算。其符号表示如下：<span class="math inline">\(x\)</span>与非<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(\overline{x \cdot y}\)</span></p>
<p>这里把<code>与非</code>单独拿出来讲，是因为在电路中，我们可以用一个<code>与非</code>组件，构造出其余所有的组件。这样我们只需要弄懂一个电路图即可。我们这节课的主旨是搞明白，如何从用电路表达布尔逻辑，至于电路的效率等方面，则是硬件工程师们考虑的内容了。其实学习就是这样，我们需要抓住主线，明确目的。如果我们陷入布尔逻辑或者电路图的细节中不可自拔，那就是路走偏了。</p>
<h2 id="逻辑电路">逻辑电路</h2>
<blockquote>
<p>逻辑电路是指完成逻辑运算的电路。这种电路，一般有若干个输入端和一个 或几个输出端，当输入信号之间满足某一特定逻辑关系时，电路就开通，有输 出;否则，电路就关闭，无输出。所以，这种电路又叫逻辑门电路，简称门电路。</p>
</blockquote>
<p>这段话来自百度百科，可能比较拗口，我们直接来看实现。</p>
<h3 id="与非门">与非门</h3>
<p><img src="/img/nand/01/nandimp.jpg" /></p>
<p>如图所示，<code>I1</code>，<code>I2</code>是输入，<code>NPN</code>是一个三极管（当<code>I1</code>或<code>I2</code>加电的时候，上下两端连通），我们用1表示有电，用0表示没电，那么只有当<code>I1</code>，<code>I2</code>都是1的时候，<code>Output</code>才是0。我们可以用真值表中的例子来验证一下。</p>
<p>为了简化表示，我们用如下的符号来表示与非门：</p>
<p><img src="/img/nand/01/nand.png" /></p>
<p>到这里我们迈出了第一步，我们用一个物理上真实存在的电路图，表示出了一种布尔运算逻辑。那么下面我们就用这个电路图来构造其余的电路图。</p>
<h3 id="非门">非门</h3>
<p>非门的实现如下：</p>
<p><img src="/img/nand/01/notimp.png" /></p>
<p>也就是我们只需要在电路图上把与非门的2个输入连起来，就可以得到一个非门：这个时候与非门的2个输入永远都是相等的，当2个输入都是1的时候，输出为0，当2个输入都是0的时候，输出为1。</p>
<p>非门的符号如下所示：</p>
<p><img src="/img/nand/01/not.png" /></p>
<h3 id="与门">与门</h3>
<p>类似地，与门的实现如下：</p>
<p><img src="/img/nand/01/andimp.png" /></p>
<p>符号表示如下：</p>
<p><img src="/img/nand/01/and.png" /></p>
<h3 id="或门">或门</h3>
<p>或门的实现如下：</p>
<p><img src="/img/nand/01/orimp.png" /></p>
<p>符号表示如下：</p>
<p><img src="/img/nand/01/or.png" /></p>
<h2 id="回顾">回顾</h2>
<p>这一节我们实现了用电路去表示基础的门电路。迈出了关键的一步，但是一直用画图的方式去表达电路也比较麻烦，下一节我们会简单学习一门<strong>硬件描述语言</strong>（HDL：hardware description language）来表示电路的实现方式，一步一步去抽象，实现更多的组件。从而构造出一个完整的电脑。</p>
<p>再聊一个题外话：抽象。抽象是软件工程师很重要的一个技能。在这里，我们用<code>或非门</code>构造出了<code>非门</code>，<code>与门</code>，<code>或门</code>，那么我们可以把构造的过程理解成一个抽象的过程，构造出的门电路可以直接供我们使用，而不必每次去画几个或非门，然后把他们连起来。当然目前的门电路比较简单，我们的感知不是很强烈，如果我们构造了一个由几十个或非门构造出的<code>某门</code>，那么抽象就显得尤为重要了。其实平时写代码也是如此，我们应该把公用的部分，抽象出一个模块或者一个工具类。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Scala的ClassTag</title>
    <url>/2019/06/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Scala%E7%9A%84ClassTag/</url>
    <content><![CDATA[<p>Scala官方文档中对于<code>ClassTag</code>的定义如下： &gt; <code>ClassTag[T]</code>保存着在运行时被JVM擦除的类型<code>T</code>的信息。当我们在运行时想获得被实例化的<code>Array</code>的类型信息的时候，这个特性会比较有用。</p>
<p>下面请看一个具体的场景：</p>
<h2 id="场景">场景</h2>
<p>假定有一个<code>Map[String, Any]</code>，给定一个指定的key，我们需要检查Map中是否存在该key对应的value，如果存在，则优雅地返回这个值。看起来很简单，下面让我们来实现它，并且逐渐理解<code>ClassTag</code>。</p>
<h2 id="解决方案一">解决方案一</h2>
<p>我们的第一次尝试如下所示：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line">    <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">    <span class="comment">/* 下面注释的代码将会不通过编译</span></span><br><span class="line"><span class="comment">     * Any不能被当时Int使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//val number:Int = myMap(&quot;Number&quot;)</span></span><br><span class="line">    <span class="comment">//println(&quot;number is &quot; + number)</span></span><br><span class="line">    <span class="comment">//使用类型转换，可以通过编译</span></span><br><span class="line">    <span class="keyword">val</span> number: <span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">Int</span>]</span><br><span class="line">    println(<span class="string">&quot;number  is &quot;</span> + number)</span><br><span class="line">    <span class="comment">//下面的代码将会抛出ClassCastException</span></span><br><span class="line">    <span class="keyword">val</span> greeting: <span class="type">String</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">String</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number  is <span class="number">1</span></span><br><span class="line"><span class="type">Exception</span> in thread <span class="string">&quot;main&quot;</span> java.lang.<span class="type">ClassCastException</span>: java.lang.<span class="type">Integer</span> cannot be cast to java.lang.<span class="type">String</span></span><br><span class="line">	at learnscala.<span class="type">Test</span>$.main(<span class="type">Test</span>.scala:<span class="number">25</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>.main(<span class="type">Test</span>.scala)</span><br></pre></td></tr></table></figure>
<p>上面的代码有几个很显然的问题：</p>
<p>首先，当我们把Any直接当成Int来使用的时候，编译器是不会通过的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这将不会通过编译</span></span><br><span class="line"><span class="keyword">val</span> number:<span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>编译器看起来没有什么错误，但是问题在于，我们没有办法使用Map中值的具体类型。换句话说，如果我们只是把值的类型设置成Any我们没办法受益于Scala提供的类型系统，所以我们需要修改代码。</p>
<p>为了通过编译，我们使用了如下的类型转换把获取的值变成了Int类型：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number:<span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">Int</span>]</span><br></pre></td></tr></table></figure>
<p>这种做法虽然能有效果，但是当我们尝试转换一个不相关的类型的时候，<code>asInstanceOf</code>会抛出一个<code>ClassCastException</code>异常。</p>
<p>所以下面这行代码，会在运行时抛出异常，因为我们试图转换一个Int值为String。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> greeting:<span class="type">String</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">String</span>]</span><br></pre></td></tr></table></figure>
<p>我们又引入了一个新的问题。</p>
<p>就算我们使用Map的<code>get()</code>方法，编译器还是不会通过，因为<code>Option[Any]</code>也没有办法当成<code>Option[Int]</code>来使用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的代码将不会通过编译</span></span><br><span class="line"><span class="keyword">val</span> number:<span class="type">Option</span>[<span class="type">Int</span>] = myMap.get(<span class="string">&quot;Number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>你可能会想什么谁的代码里面会使用<code>Map[String, Any]</code>，这显然不是一个好的设计。但是我们先忽略这一点，并假设这个结构确实存在，下面我们回到这个问题。</p>
<p>使用<code>asInstanceOf</code>显然也不是一个好的方案，处理<code>ClassCastException</code>的办法之一是使用<code>try/catch</code>，但是这个方案并不是一个可靠并且优雅的方案，所以我们并不会采用。</p>
<h2 id="解决方案二">解决方案二</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getValueFromMap for the Int, String and Animal</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForInt</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]):<span class="type">Option</span>[<span class="type">Int</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">Int</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForString</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]: <span class="type">Option</span>[<span class="type">String</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">String</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForAnimal</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]: <span class="type">Option</span>[<span class="type">Animal</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">Animal</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMapForInt(<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMapForInt(<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMapForString(<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMapForString(<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMapForAnimal(<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMapForAnimal(<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br></pre></td></tr></table></figure></p>
<p>现在我们使用<code>getValueFromMapForXXX</code>方法来获取Map中<code>XXX</code>类型的值，从而避免了<code>ClassCastException</code>。</p>
<p>虽然解决了之前的问题，但是现在的这个解决方案任然不够好，因为，当我们增加一个新的类型的时候，就要提供一个新的<code>getValueFromMapForXXX</code>方法。</p>
<h2 id="解决方案三">解决方案三</h2>
<p>我们尝试使用类型参数来解决之前方案中<code>getValueFromMapForXXX</code>方法的可扩展性不足的问题。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>现在我们只有一个<code>getValueFromMap[T]</code>的方法，它的参数和之前的版本一样，但是现在需要传入一个类型参数<code>T</code>。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// 注意，这里开始出现问题了</span></span><br><span class="line">  <span class="comment">// 现在编译器不会报错，因为所有的都发生在运行时</span></span><br><span class="line">  <span class="comment">// 即使getValueFromMap 返回的是 Option[String]</span></span><br><span class="line">  <span class="keyword">val</span> greetingInt: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  <span class="comment">// 输出 Some(Hello World)</span></span><br><span class="line">  println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br><span class="line">  <span class="comment">// 这里会抛出 ClassCastException</span></span><br><span class="line">  <span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line">  <span class="comment">// 下面的不会打印</span></span><br><span class="line">  println(somevalue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greetingInt is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line"><span class="type">Exception</span> in thread <span class="string">&quot;main&quot;</span> java.lang.<span class="type">ClassCastException</span>: java.lang.<span class="type">String</span> cannot be cast to java.lang.<span class="type">Integer</span></span><br><span class="line">	at scala.runtime.<span class="type">BoxesRunTime</span>.unboxToInt(<span class="type">BoxesRunTime</span>.java:<span class="number">103</span>)</span><br><span class="line">	at scala.runtime.java8.<span class="type">JFunction1</span>$mcII$sp.apply(<span class="type">JFunction1</span>$mcII$sp.java:<span class="number">23</span>)</span><br><span class="line">	at scala.<span class="type">Option</span>.map(<span class="type">Option</span>.scala:<span class="number">163</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>$.main(<span class="type">Test</span>.scala:<span class="number">63</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>.main(<span class="type">Test</span>.scala)</span><br></pre></td></tr></table></figure></p>
<p>现在，我们所需要做的就是调用<code>getValueFromMap[T]</code>方法，并且传递我们期待的类型和key，这样Map就可以返回我们需要的value。假如我们需要获取一个key为<code>Number</code>的Int类型的值，我们只需要这样做就可以了： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number1:<span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br></pre></td></tr></table></figure></p>
<p>到现在为止，我们看起来有了一个可靠的解决方案，因为我们只有一个<code>getValeFromMap</code>方法，并且我们也没有编译错误或者因为调用<code>asInstanceOf</code>不当而抛出的运行时<code>ClassCastException</code>异常。</p>
<p>在解决方案三中，我们解决了如下的几个问题：</p>
<ol type="1">
<li>用户需要更加了解他正在处理的类型，以减少不必要的运行时异常。</li>
<li>不需要<code>asInstanceOf</code>方法，如果key找到了，那么我们返回对应的<code>Some[value]</code>，否则，返回<code>None</code>。</li>
<li>可扩展性更好。</li>
</ol>
<p>到现在为止看起来还好，但是就像上面代码中所展示的，当用户不小心使用了错误的类型时，还是会有错误发生。</p>
<p>下面的代码虽然可以正常工作，但是并不符合逻辑： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尝试转换 Option[String] 为 Option[Int]</span></span><br><span class="line"><span class="keyword">val</span> greetingInt:<span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br></pre></td></tr></table></figure></p>
<p>Map中key为<code>Greeting</code>的value值为String类型，但是我们把它赋值给<code>Option[Int]</code>。惊人的是，下面的代码可以正常工作： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prints Some(Hello World)</span></span><br><span class="line">println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br></pre></td></tr></table></figure></p>
<p>但是当我们做一个Int操作的时候，会抛出异常。</p>
<p>如下所示的代码，会抛出<code>ClassCaseException</code>： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这行代码会抛出 ClassCastException 异常</span></span><br><span class="line"><span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 下面这行代码不会被打印</span></span><br><span class="line">println(somevalue)</span><br></pre></td></tr></table></figure></p>
<p>是不是<code>getValueFromMap[T]</code>需要捕获这个异常呢，我们的方法有问题吗？让我们继续看一下这个方法： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value:<span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>方法看起来是好的，我们所做的就是调用<code>get(key)</code>方法，并且检查value是不是T类型的，如果是，并且存在这个value，那么返回<code>Some(value: T)</code>,否则返回<code>None</code>。</p>
<p>所以，在上面的例子中，key为<code>Greeting</code>的value类型为<code>Int</code>,它应该检查<code>Some(value: Int)</code>是否是符合，显然，它应该返回<code>None</code>,因为key为<code>Greeting</code>的value的值为：<code>Hello World</code>，这是一个String而不是Int。但是我们使用了一个Int去接收。</p>
<p>问题在于，为什么下面这行代码没有捕捉到异常： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(value:<span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br></pre></td></tr></table></figure></p>
<p>运行时只会检查key有没有对应的value，而不会检查value是否是我们传递的<code>T</code>类型。因为运行时不包含我们传递的任何类型信息，在运行时，<code>T</code>已经被擦除不存在了。在JVM中被称为类型擦除。</p>
<p>所以我们最好可以保证，我们传递的类型<code>T</code>在运行时可以存在，去帮助运行时实现一些逻辑。下面我们引入<code>ClassTag</code>。</p>
<p>我们需要做的就是传递一个隐式的<code>ClassTag[T]</code>参数，如果我们需要获取Map中Int类型的value时，我们需要传递一个隐式的<code>ClassTag[Int]</code>参数。然后，当我们调用这个方法的时候，我们可以不传递隐式参数（参考Scala隐式转换），编译器会自动为我们提供。</p>
<p>所以现在的<code>getValuleFromMap</code>看起来是下面这样的： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>])(<span class="keyword">implicit</span> t:<span class="type">ClassTag</span>[<span class="type">T</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的方法也可以写成这样，效果是以一样的，但是看起来优雅一些： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span> : <span class="type">ClassTag</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>方法调用不需要做任何改变，因为编译器会为我们提供隐式的<code>ClassTag[T]</code>参数。</p>
<h2 id="最终的方案">最终的方案</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getValueFromMap</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// 现在这行代码没有问题，我们会得到None</span></span><br><span class="line">  <span class="keyword">val</span> greetingInt: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  <span class="comment">// prints None</span></span><br><span class="line">  println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br><span class="line">  <span class="comment">// 没有 ClassCastException 并且返回 None</span></span><br><span class="line">  <span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line">  <span class="comment">// print None</span></span><br><span class="line">  println(somevalue)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// other map with list</span></span><br><span class="line">  <span class="keyword">val</span> someMap = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>, <span class="string">&quot;goodList&quot;</span> -&gt; <span class="type">List</span>(<span class="string">&quot;good&quot;</span>, <span class="string">&quot;better&quot;</span>, <span class="string">&quot;best&quot;</span>))</span><br><span class="line">  <span class="comment">// gets the list from map</span></span><br><span class="line">  <span class="keyword">val</span> goodList: <span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">  <span class="comment">// prints the list</span></span><br><span class="line">  println(goodList)</span><br><span class="line">  println</span><br><span class="line">  println(<span class="string">&quot;Now let us try to get bad list&quot;</span>)</span><br><span class="line">  <span class="comment">// tries to get bad list from the map</span></span><br><span class="line">  <span class="keyword">val</span> badListNotExists: <span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;badList&quot;</span>, someMap)</span><br><span class="line">  <span class="comment">// prints None</span></span><br><span class="line">  println(badListNotExists)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码的输出如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greetingInt is <span class="type">None</span></span><br><span class="line"><span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Some</span>(<span class="type">List</span>(good, better, best))</span><br><span class="line"></span><br><span class="line"><span class="type">Now</span> let us <span class="keyword">try</span> to get bad list</span><br><span class="line"><span class="type">None</span></span><br></pre></td></tr></table></figure>
<p>现在，所有的问题都解决了，感谢Scala提供的<code>ClassTag</code>，帮我们在运行时获得我们传递的类型参数的信息。</p>
<h2 id="结论">结论</h2>
<p><code>ClassTag</code>对于我们在运行时获得类型参数<code>T</code>的信息是至关重要的，在多数情况下，它会提供许多便利。然而，它也有一些局限性，我们只能从<code>ClassTag</code>获取更高类型的信息，而不是参数类型更高的信息，这听起来有点绕，让我们看下面的例子。</p>
<p>如果我们使用下面的代码： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> goodList:<span class="type">Option</span>[<span class="type">List</span>[<span class="type">Int</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">Int</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">    <span class="comment">// prints the list</span></span><br><span class="line">    println(goodList)</span><br></pre></td></tr></table></figure></p>
<p>替换：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> goodList:<span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">    <span class="comment">// prints the list</span></span><br><span class="line">    println(goodList)</span><br></pre></td></tr></table></figure>
<p>它仍然能正常工作，因为<code>ClassTag</code>仅仅在运行时提供更高的类型信息（List）不是参数类型的信息（Int、String）。这就是即使我们使用<code>getValueFromMap[List[Int]]</code>去接受key为<code>goodList</code>的value还能正常工作的原因。但是在有些情况下，我们需要在运行时获得参数的类型信息，这时候我们就需要使用<code>TypeTag</code>。</p>
<h2 id="参考">参考</h2>
<p><a href="https://dzone.com/articles/scala-classtag-a-simple-use-case" title="https://dzone.com/articles/scala-classtag-a-simple-use-case">How to Use the Scala ClassTag</a></p>
]]></content>
      <categories>
        <category>Programing</category>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>Scala</tag>
        <tag>ClassTag</tag>
      </tags>
  </entry>
</search>
