<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零构造一台计算机——二进制</title>
    <url>/2021/08/05/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<h2 id="二进制的定义">二进制的定义</h2>
<p>人类发明<code>0,1,2,3,4,5,6,7,8,9</code>这10个数字，大概率是因为我们有十个手指。假如我们把这种计数方式称为十进制计数法，然后我们来到了一个世界，那里面的人只有2个手指。我们该如何用十进制的思想去用创造出二进制呢。</p>
<p>简单约定一下，后面用下标表示进制，比如<span class="math inline">\(10_2\)</span>表示二进制，而<span class="math inline">\(10_{10}\)</span>表示十进制。</p>
<span id="more"></span>
<p>首先，我们能用的数字只有<code>0,1</code>这2个，忘掉十进制中其余的数字。那么我们如何计数呢？以数苹果为例，在十进制中，我们数到第<span class="math inline">\(9_{10}\)</span>个苹果的时候，我们需要做一个操作就是进位，然后低位置为<code>0</code>。现在来到二进制，我们如何表示下面苹果的数量：</p>
<p><img src="/img/nand/02/apple.jpeg" /></p>
<p>需要注意的是，二进制中只有<code>0,1</code>，当我们数到第<span class="math inline">\(1_2\)</span>个苹果的时候，我们需要做的也是进位。类似地，我们会得到<span class="math inline">\(10_2\)</span>，继续数下去，就是<span class="math inline">\(11_2\)</span>，所以答案就是这里有<span class="math inline">\(11_2\)</span>个苹果。</p>
<p>对于一个十进制数，我们知道它有<code>个位</code>，<code>十位</code>，<code>百位</code>，<code>千位</code>，<code>万位</code>……，其实这些<code>位</code>代表的就是<span class="math inline">\(10^n\)</span>。比如<code>个位</code>是<span class="math inline">\(10^0\)</span>，<code>十位</code>是<span class="math inline">\(10^1\)</span>，<code>百位</code>是<span class="math inline">\(10^2\)</span>，对于一个数<span class="math inline">\(123_{10}\)</span>，我们可以说它的个位是<code>3</code>，十位是<code>2</code>，百位是<code>1</code>，那么我们可以通过这样计算来得到： <span class="math display">\[123_{10} = 1 \cdot 10^2 + 2 \cdot 10^1 + 3 \cdot 10^0\]</span> 于是，对于十进制，我们可以抽象出下面的公式： <span class="math display">\[x_{n}x_{n-1}x_{n-2}...x_{0}=\sum_{i=0}^{n}{10^i \cdot x_i}\]</span> 那么，对于二进制，我们自然而然可以得到下面的公式（需要注意的是，下面公式右边的<code>10</code>其实是<span class="math inline">\(10_2\)</span>）： <span class="math display">\[x_{n}x_{n-1}x_{n-2}...x_{0}=\sum_{i=0}^{n}{10^i \cdot x_i}\]</span></p>
<p>公式右边的<code>10</code>我们称之为<code>基底</code>，十进制的基低是<span class="math inline">\(10_{10}\)</span>，二进制的基低是<span class="math inline">\(10_{2}\)</span>。</p>
<h2 id="二进制转十进制">二进制转十进制</h2>
<p>对于二进制，我们已经得到这样的公式： <span class="math display">\[x_{n}x_{n-1}x_{n-2}...x_{0}=\sum_{i=0}^{n}{\left(10_2\right)^i \cdot x_i}\]</span> 由于二进制中的<code>0,1</code>和十进制中的<code>0,1</code>的含义是一样的，并且二进制中的<span class="math inline">\(10_2\)</span>等价于十进制中的<span class="math inline">\(2_{10}\)</span>，而<span class="math inline">\(x_i\)</span>（公式右侧）在二进制中只有可能是<code>0,1</code>，所以我们可以作如下推导： <span class="math display">\[\sum_{i=0}^{n}{\left(10_2\right)^i \cdot x_i} \Rightarrow \sum_{i=0}^{n}{\left(2_{10}\right)^i \cdot x_i}\]</span></p>
<p>于是我们可以用十进制的方式去表达二进制： <span class="math display">\[\left(x_{n}x_{n-1}x_{n-2}...x_{0}\right)_{2}=\sum_{i=0}^{n}{\left(2_{10}\right)^i \cdot x_i}\]</span></p>
<p>我们可以验证一下： <span class="math display">\[11_2=1\cdot2^1+1\cdot2^0=3\]</span></p>
<p>所以二进制的<span class="math inline">\(11_2\)</span>等价于十进制的<span class="math inline">\(3_{10}\)</span>，他们都表示上图中苹果的数量。</p>
<h2 id="二进制的加法运算">二进制的加法运算</h2>
<p>二进制的加减法运算，也可以用十进制的思想来做，首先通过上面例子我们知道<span class="math inline">\(1_2\)</span>个苹果加上<span class="math inline">\(1_2\)</span>个苹果等于<span class="math inline">\(10_2\)</span>个苹果，也就是说在二进制中<code>1+1=10</code>。基于这个条件，我们分别来计算<code>1001+0101</code>和<code>1011+0111</code>。</p>
<p>首先看<code>1001+0101</code>，我们列出下面的式子，然后用十进制加法的思想去做，可以得到结果是<code>1110</code>： <span class="math display">\[
\begin{split}
\left(进位\right)0\quad&amp;0\quad0\quad1\\
&amp;1\quad0\quad0\quad1\\
+&amp;\underline{0\quad1\quad0\quad1}\\
0\quad&amp;1\quad1\quad1\quad0\\
\end{split}
\]</span></p>
<p>然后来看<code>1011+0111</code>，我们也可以列出下面的式子，用同样的方法去做，但是这边最后发生了进位，所以结果是<code>10010</code>： <span class="math display">\[
\begin{split}
\left(进位\right)1\quad&amp;1\quad1\quad1\\
&amp;1\quad0\quad1\quad1\\
+&amp;\underline{0\quad1\quad1\quad1}\\
1\quad&amp;0\quad0\quad1\quad0\\
\end{split}
\]</span></p>
<p>我们可以转成十进制来验算一下，结果是没问题的。那么减法也可以用类似的思想来做。</p>
<h2 id="计算机中二进制的表示">计算机中二进制的表示</h2>
<p>由于二进制只能由<code>0,1</code>组成，那么对于<span class="math inline">\(n\)</span>位的二进制数，我们有<span class="math inline">\(2^n\)</span>中组合：从<span class="math inline">\(000...0\)</span>到<span class="math inline">\(111...1\)</span>。所以一个<span class="math inline">\(n\)</span>位二进制数的表示范围是<span class="math inline">\(0 \to 2^n\)</span>（这里的<span class="math inline">\(2^n\)</span>是十进制）。</p>
<p>那么如何表示负数呢？可能有人会说前面加个<code>-</code>号，和我们平时表示的方式一样。</p>
<p>其实通过前面的课程我们知道，我们用电路的通断来表示<code>1</code>或者<code>0</code>，电路连通的时候为<code>1</code>，断开的时候为<code>0</code>，只有这两种状态，没有第三种。所以<code>-</code>号其实是无法在计算机中表示出来的。</p>
<p>为此，前辈们想出了<code>有符号数</code>，即把二进制的第一位拿出来作为符号位，<code>1</code>表示负数，<code>0</code>表示正数，剩下的来表示具体的数值。</p>
<p>但是如果负数仅仅用第一位符号位来指示，可能还会遇到很多麻烦：比我们知道十进制中<span class="math inline">\((-3)+3=0\)</span>，这时候我们转化为4位的二进制（第一位为符号位）可以得到<span class="math inline">\(1011_2+0011_2\)</span>，结果是<span class="math inline">\(1011_2+0011_2=1110_2\)</span>，如果<span class="math inline">\(1110_2\)</span>我们仍然把第一位解释成符号位，那么转换成十进制，就得到了<span class="math inline">\((-3)+3=-6\)</span>，这显然是不对的。</p>
<p>那么如何让<span class="math inline">\(1011_2+0011_2=0000_2\)</span>呢？在上面加法的例子中，我们还记得<span class="math inline">\(1011+0111=10010\)</span>，这里发生了进位，也就是2个四位数的二进制相加，得到一个五位数的二进制数。那么在计算机中，假如我们设计的计算机只能表示4位的二进制数，那么最终的结果也只能有4位，也就是在该计算机中，我们会得到<span class="math inline">\(1011+0111=0010\)</span>（最高位1丢弃了）。</p>
<p>基于这个特性，我们可以这样设计负的二进制数，假设这里计算机只能表示4位二进制数，并且<span class="math inline">\(0011_2\)</span>的负数设为<span class="math inline">\(x\)</span>，我们需要得到<span class="math inline">\(0011_2+x=0000_2\)</span>，又因为该计算机只能表示4位数，所以在该计算机中，<span class="math inline">\(0000_2=10000_2\)</span>，注意后面是一个5位二进制数。所以，我们可以这样去设计<span class="math inline">\(x\)</span>，使得<span class="math inline">\(0011_2+x=10000_2\)</span>，得到<span class="math inline">\(x=1101\)</span>。我们再来验算一下：<span class="math inline">\(0011_2+1101_2=10000_2 \Rightarrow 0000_2\)</span>，于是我们可以说，在该计算机中<span class="math inline">\(0011_2+1101_2=0000_2\)</span>是成立的。</p>
<h2 id="补码">补码</h2>
<p>上面这种二进制的表示法，我们就称之为<strong>补码</strong>表示法。</p>
<p>总结一下，可以得到如下的定义（假设计算机能表示的二进制数为<span class="math inline">\(n\)</span>位）：</p>
<p><span class="math display">\[
x_补=\left\{
\begin{aligned}
x &amp; &amp; (x\ge0) \\
2^n &amp; - x &amp; (x&lt;0)
\end{aligned}
\right.
\]</span></p>
<h3 id="最高位的含义">最高位的含义</h3>
<p>我们现在知道了补码的定义，那么在补码中，任何符号位为<code>0</code>的整数都能得到符号位为<code>1</code>的负数吗？我们可以简单证明一下：</p>
<p>假设有<span class="math inline">\(n\)</span>位的二进制数<span class="math inline">\(x_nx_{n-1}x_{n-2}x_{n-3}...x_2x_1\)</span>，且最高位为符号位，所以其数值部分为<span class="math inline">\(x_{n-1}x_{n-2}x_{n-3}...x_2x_1\)</span>。我们设<span class="math inline">\(x_{n-1}x_{n-2}x_{n-3}...x_2x_1\)</span>为<span class="math inline">\(t\)</span>，那么<span class="math inline">\(-t\)</span>可以表示为<span class="math inline">\(2^n-t\)</span>，而<span class="math inline">\(2^n \Rightarrow 100...0\left(n个0\right)\)</span>，所以我们可以列出下面的式子：</p>
<p><span class="math display">\[
\begin{split}
&amp;1_{n+1}\quad0_{n}\quad0_{n-1}\quad0_{n-2}\quad...\quad0_3\quad0_2\quad0_1\\
-&amp;\underline{ 0_{n+1}\quad0_{n}\quad x_{n-1} \quad x_{n-2} \quad... \quad x_{3}\quad x_2\quad x_1}\\
&amp;r_{n+1}\quad r_{n}\quad r_{n-1} \quad r_{n-2} \quad... \quad r_{3}\quad r_2\quad r_1\\
\end{split}
\]</span></p>
<p>我们设结果为<span class="math inline">\(r_{n+1}r_nr_{n-1}r_{n-2}r_{n-3}...r_2r_1\)</span>，当<span class="math inline">\(t\)</span>不为0的时候，不管是哪一位不为0，我们做减法的时候肯定会向前借位，但是因为<span class="math inline">\(2^n\)</span>只有第<span class="math inline">\(n+1\)</span>位为1，所以只能向前传递，借第<span class="math inline">\(n+1\)</span>位的1。但是因为<span class="math inline">\(t\)</span>中的<span class="math inline">\(n+1\)</span>位恒为0，所以我们可以得到<span class="math inline">\(r_{n+1}=0\)</span>，同理<span class="math inline">\(r_{n}=1\)</span>。所以对于任意的符号位为<code>0</code>的正数，其补码都是符号位为<code>1</code>的负数。</p>
<p>这里面有个特殊情况，对于<code>0</code>来说，是不分正负的，而且<span class="math inline">\(0+0=0\)</span>，那么<code>0</code>到底是<code>+0</code>还是<code>-0</code>呢，也就是说<code>0</code>的最高位应该是什么？</p>
<p>我们先来看<code>+0</code>，由于<code>+0</code>所有位都是<code>0</code>，所以<span class="math inline">\((+0)+(+0)=(+0)\)</span>，是没有问题的。但是对于<code>-0</code>来说就不是这样了，由于<code>-0</code>的最高位为<code>1</code>，所以当<span class="math inline">\((-0)+(-0)\)</span>之后，最高位变成了0，并且发生了进位，并且进位被丢弃（前面讲过），于是我们得到<span class="math inline">\((-0)+(-0)=(+0)\)</span>，这显然不太对，直觉告诉我们应该用<code>+0</code>来表示<code>0</code>。</p>
<p>那么当最高位为1，其余位都是0的时候，这个数字代表什么呢？</p>
<p>还记得我们得出补码的过程吗，我们是用<span class="math inline">\(2^n-x\)</span>算出来的。那么对于最高位为1的<span class="math inline">\(n位\)</span>二进制数来说，其我们可以用十进制数<span class="math inline">\(2^{n-1}\)</span>来表示他的值，通过计算<span class="math inline">\(2^n-2^{n-1}\)</span>我们可以得到他的正数表示也是<span class="math inline">\(2^{n-1}\)</span>，所以当一个<span class="math inline">\(n\)</span>位二进制数的最高位为1，其余位全是0的时候，他的值就是<span class="math inline">\(\left(-2^{n-1}\right)\)</span>。</p>
<p>以一个4位二进制数为例：</p>
<table>
<thead>
<tr class="header">
<th>正数</th>
<th>负数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0   0000</td>
<td></td>
</tr>
<tr class="even">
<td>1   0001</td>
<td>1111   -1</td>
</tr>
<tr class="odd">
<td>2   0010</td>
<td>1110   -2</td>
</tr>
<tr class="even">
<td>3   0011</td>
<td>1101   -3</td>
</tr>
<tr class="odd">
<td>4   0100</td>
<td>1100   -4</td>
</tr>
<tr class="even">
<td>5   0101</td>
<td>1011   -5</td>
</tr>
<tr class="odd">
<td>6   0110</td>
<td>1010   -6</td>
</tr>
<tr class="even">
<td>7   0111</td>
<td>1001   -7</td>
</tr>
<tr class="odd">
<td></td>
<td>1000   -8</td>
</tr>
</tbody>
</table>
<h3 id="用加法代替减法">用加法代替减法</h3>
<p>前面补码的定义可知，一个<span class="math inline">\(n\)</span>位的二进制正数<span class="math inline">\(x\)</span>的负数我们可以用<span class="math inline">\(x_补 \Rightarrow 2^n - x\)</span>来表示。假如我们要计算<span class="math inline">\(t-x\)</span>，我们可以作如下推断： <span class="math display">\[
\begin{split}
&amp; t-x \\
\Rightarrow &amp; t+(-x) \\
\Rightarrow &amp; t+x_补
\end{split}
\]</span></p>
<p>那么当<span class="math inline">\(x\)</span>是负数的时候呢？类似地，我们可以得到： <span class="math display">\[
\begin{split}
&amp; t-x \\
\Rightarrow &amp; t+|x| \\
\Rightarrow &amp; t+x_补
\end{split}
\]</span> 这里的<span class="math inline">\(|x|\)</span>表示<span class="math inline">\(x\)</span>的绝对值，我们知道，当<span class="math inline">\(x\)</span>为负数的时候，其绝对值就是他的补码。</p>
<p>综上所述，不论<span class="math inline">\(x\)</span>是正的还是负的，我们都可以用其补码来实现用加法代替减法的操作。</p>
<h2 id="总结">总结</h2>
<p>最高位作为符号位是一个很巧妙的设计，对于<span class="math inline">\(n\)</span>位的二进制数<span class="math inline">\(x_nx_{n-1}x_{n-2}x_{n-3}...x_1x_0\)</span>来说，他们的数值部分都是<span class="math inline">\(x_{n-1}x_{n-2}x_{n-2}...x_1x_0\)</span>，相当于正好把取值范围一分为二，一半给了正数，一半给了负数。</p>
<p>补码的引入也非常合理，最高位不仅可以作为符号位表示数字的正负，并且也可以参与计算、实现用加法代替减法。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——寄存器</title>
    <url>/2022/01/12/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h2 id="触发器">触发器</h2>
<p>触发器的逻辑电路：</p>
<p><img src="/images/y50a3eb4PSbAmSyT4xyJa4af-hIpIEQCsXoirz5jedM.gif" /></p>
<span id="more"></span>
<p>触发器可以记住当前的状态，输入和S,R的关系如下：</p>
<p><img src="/images/CNitTfECEIU3B17Ac5l37mjEchzI1bB0GIHZ6PoDfDA.png" /></p>
<p>当我们需要保存一个比特时，可以借助触发器，但是触发器有 <span class="math inline">\(Q\)</span> 和 <span class="math inline">\(\overline{Q}\)</span> 2个输出，这里我们选择 <span class="math inline">\(Q\)</span> ，没有什么特殊的考虑，就是一种约定。</p>
<p>当我们需要Q输出为1的时候，S和R分为为0和1，否则反之。因为S和R的总是相反的，所以我们可以这么做，在R上面加一个非门，这样就可以用一个输入代替了:</p>
<p><img src="/images/pQWXf6fXz9sypXqGgsZcdq0SyIDPRPiYDjEhU83NQsw.png" /></p>
<p>但是这时候的触发器还是不具有“记忆功能”，因为输入不是0就是1，所以输出也一样，这时候和导线就没有区别了。</p>
<p>想要的效果是，有一个控制端，可以控制触发器什么时候加载输入，当不加载输入的时候，输出就是保存的值，于是我们可以这么做:</p>
<p><img src="/images/W6y6r3-KK9jucfGQASc5639FagC7n98UiyfsPum1ZV4.png" /></p>
<p>加一个控制端CP，当CP是0的时候，触发器的输入就是0，不管D怎么变，都不会改变触发器的输出。只有当CP为1的时候，触发器才能保存D的内容。</p>
<p>我们把上面的触发器称为D触发器，D是Data的意思，符号如下：</p>
<p><img src="/images/xJFKPNz-JDzAhlNbUbpbnKg-_KdxJbfj6kBAhtE8RkU.png" /></p>
<h2 id="寄存器">寄存器</h2>
<p>我们可以用多个触发器组成一个寄存器，多个寄存器再组成内存：</p>
<p><img src="/images/kSwhCoiLzQ4Dc1mBaYNkOc1L9mUPRLx5Q86ZCRWVsxs.png" /></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——从加法器到ALU</title>
    <url>/2022/01/20/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E4%BB%8E%E5%8A%A0%E6%B3%95%E5%99%A8%E5%88%B0ALU/</url>
    <content><![CDATA[<h2 id="加法器">加法器</h2>
<p>在《二进制》文章中，讲了补码，利用补码我们可以用加法代替减法。</p>
<p>所以我们需要一个加法器，下面看看如何用前面的基础逻辑电路组装一个加法器。</p>
<h3 id="半加器">半加器</h3>
<p>半加器是对2个二进制数字相加得到结果，结果可能有进位。</p>
<p>但是实际上一共也只有4种情况，我们不妨全部列出来看看：</p>
<span id="more"></span>
<p><img src="/images/fe1e84f8-9eb0-45eb-9e36-d3cb1c8ccb92.png" /></p>
<p>不难发现<code>sum = a Xor b</code> ，<code>carry = a And b</code></p>
<p>所以其实半加器很简单，用HDL可以这么描述：</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">CHIP HalfAdder &#123;</span><br><span class="line">    IN a, b;    // 1-bit inputs</span><br><span class="line">    OUT sum,    // Right bit of a + b </span><br><span class="line">        carry;  // Left bit of a + b</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Xor(a=a, b=b, out=sum);</span><br><span class="line">    And(a=a, b=b, out=carry);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全加器">全加器</h3>
<p>全加器是带进位的加法，也就是三位数相加，一共有8种情况，我们也可以都列出来看看：</p>
<p><img src="/images/1869b8b2-52d7-4ded-b443-a32f2ce74d59.png" /></p>
<p>我们可以用2个半加器实现，但是仔细观察也可以发现，其实<code>sum = a Xor b Xor c</code> ，<code>carry = ( ( a Xor b ) And c ) Or ( a And b )</code> ，其实这里面有个小技巧，就是把所有是1的拿出来做Or操作，然后简化一下就得到了最终的表达式。</p>
<p>我们用HDL可以这么描述全加器：</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">CHIP FullAdder &#123;</span><br><span class="line">    IN a, b, c;  // 1-bit inputs</span><br><span class="line">    OUT sum,     // Right bit of a + b + c</span><br><span class="line">        carry;   // Left bit of a + b + c</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Xor(a=a, b=b, out=out1);</span><br><span class="line">    Xor(a=out1, b=c, out=sum);</span><br><span class="line">    And(a=out1, b=c, out=out2);</span><br><span class="line">    And(a=a, b=b, out=out3);</span><br><span class="line">    Or(a=out2, b=out3, out=carry);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="算术逻辑单元alu">算术逻辑单元（ALU）</h2>
<p>ALU的功能如下表所示：</p>
<p><img src="/images/34a7f047-5417-41ff-8b26-e70814d49b57.png" /></p>
<p>没啥特别的，用逻辑电路直接就可以实现了，实现逻辑都在代码里：</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">CHIP ALU &#123;</span><br><span class="line">    IN  </span><br><span class="line">        x[16], y[16],  // 16-bit inputs        </span><br><span class="line">        zx, // zero the x input?</span><br><span class="line">        nx, // negate the x input?</span><br><span class="line">        zy, // zero the y input?</span><br><span class="line">        ny, // negate the y input?</span><br><span class="line">        f,  // compute out = x + y (if 1) or x &amp; y (if 0)</span><br><span class="line">        no; // negate the out output?</span><br><span class="line"></span><br><span class="line">    OUT </span><br><span class="line">        out[16], // 16-bit output</span><br><span class="line">        zr, // 1 if (out == 0), 0 otherwise</span><br><span class="line">        ng; // 1 if (out &lt; 0),  0 otherwise</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    //zx, nx</span><br><span class="line">    Mux16(a=x, b=false, sel=zx, out=zxout);</span><br><span class="line">    Not16(in=zxout, out=notx);</span><br><span class="line">    Mux16(a=zxout, b=notx, sel=nx, out=nxout);</span><br><span class="line">    //zy, ny</span><br><span class="line">    Mux16(a=y, b=false, sel=zy, out=zyout);</span><br><span class="line">    Not16(in=zyout, out=noty);</span><br><span class="line">    Mux16(a=zyout, b=noty, sel=ny, out=nyout);</span><br><span class="line">    //f</span><br><span class="line">    Add16(a=nxout, b=nyout, out=xpy);</span><br><span class="line">    And16(a=nxout, b=nyout, out=xay);</span><br><span class="line">    Mux16(a=xay, b=xpy, sel=f, out=fout);</span><br><span class="line">    //no</span><br><span class="line">    Not16(in=fout, out=nfout);</span><br><span class="line">    Mux16(a=fout, b=nfout, sel=no, out[15]=ng, out[0]=out0, out[1]=out1, out[2]=out2, out[3]=out3, out[4]=out4, out[5]=out5, out[6]=out6, out[7]=out7, out[8]=out8, out[9]=out9, out[10]=out10, out[11]=out11, out[12]=out12, out[13]=out13, out[14]=out14, out[15]=out15, out=out);</span><br><span class="line">    //zr</span><br><span class="line">    Or(a=out0, b=out1, out=or1);</span><br><span class="line">    Or(a=or1, b=out2, out=or2);</span><br><span class="line">    Or(a=or2, b=out3, out=or3);</span><br><span class="line">    Or(a=or3, b=out4, out=or4);</span><br><span class="line">    Or(a=or4, b=out5, out=or5);</span><br><span class="line">    Or(a=or5, b=out6, out=or6);</span><br><span class="line">    Or(a=or6, b=out7, out=or7);</span><br><span class="line">    Or(a=or7, b=out8, out=or8);</span><br><span class="line">    Or(a=or8, b=out9, out=or9);</span><br><span class="line">    Or(a=or9, b=out10, out=or10);</span><br><span class="line">    Or(a=or10, b=out11, out=or11);</span><br><span class="line">    Or(a=or11, b=out12, out=or12);</span><br><span class="line">    Or(a=or12, b=out13, out=or13);</span><br><span class="line">    Or(a=or13, b=out14, out=or14);</span><br><span class="line">    Or(a=or14, b=out15, out=or15);</span><br><span class="line">    Not(in=or15, out=zr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——布尔代数到逻辑电路</title>
    <url>/2021/07/26/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E5%B8%83%E5%B0%94%E4%BB%A3%E6%95%B0%E5%88%B0%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<p>最近在学习coursera上的一门课：<a href="https://www.coursera.org/learn/build-a-computer">Build a Modern Computer from First Principles: From Nand to Tetris</a>，我会坚持更新这一系列的博客，作为记录自己学习的过程，同时也倒逼自己去把学会的东西再讲出来，来深入理解。</p>
<p>其实我们生活中所有的电子设备都是基于<strong>逻辑门电路</strong>（后面会解释）来构造的。这是很神奇的一件事情，我在中学的时候就好奇计算机是如何完成这一些复杂的操作的，我相信很多人也都好奇过。这门课的愿景就是带我们从一个最基础的电路开始，构造出一个完整的计算机。</p>
<span id="more"></span>
<h2 id="布尔代数">布尔代数</h2>
<blockquote>
<p>在数学和数理逻辑中，逻辑代数（有时也称开关代数、布尔代数）是代数的一个分支，其变量的值仅为真和假两种真值（通常记作 1 和 0）。逻辑代数是乔治·布尔（George Boole）在他的第一本书《逻辑的数学分析》（1847年）中引入的，并在他的《思想规律的研究》（1854年）中更充分的提出了逻辑代数。</p>
</blockquote>
<p>这段话来自维基百科，<strong>布尔</strong>其实是一个人名，因为布尔代数就是他提出的，所以用他的名字来命名。这里不会深入讲解布尔代数，我们只讲我们用得到的部分。</p>
<p>还是以数学为例，数学中最基础的四则运算是<code>加</code>，<code>减</code>，<code>乘</code>，<code>除</code>，同样的，布尔代数也有很多计算方式，最基础的是应该是：<code>与</code>，<code>或</code>，<code>非</code>。</p>
<p>在开始讲具体的计算之前，我们需要把前提记住：<strong>布尔代数变量的值仅为真和假两种真值（通常记作 1 和 0，真为1，假为0）。</strong></p>
<h3 id="与">与</h3>
<p>因为布尔代数变量的值仅为真和假两种真值，所以我们其实可以把所有的情况都列出来，形成一张表，这张表就是我们平时所说的<strong>真值表</strong>。</p>
<p><code>与</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x与y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>从上面也可以看出，对于<span class="math inline">\(n\)</span>个变量的真值表，会有<span class="math inline">\(2^n\)</span>种情况。</p>
<p><code>x与y</code>其实就是当<code>x</code>和<code>y</code>都是1的时候，结果为1，也就是<code>x</code>和<code>y</code>都是真的时候，结果为真。</p>
<p>你也可以有你自己的理解方式，比如我们一开始学加法的时候，老师告诉我们<code>1+1=2</code>其实就是一个苹果加一个苹果等于2个苹果。那么<code>x与y</code>你也可以这么理解：假如你想出去旅游要征询爸爸妈妈的意见，x代表爸爸的意见，x=1代表爸爸同意，y代表妈妈的意见，y=1代表妈妈同意，为0则是不同意。那么<code>与</code>的意思就是，爸爸<strong>与</strong>妈妈都同意了，才是通过。</p>
<p>我们平时表述<code>x加y</code>用符号<code>+</code>来表示：<code>x+y</code>；同样的，<code>与</code>也有它的符号：<span class="math inline">\(x\)</span>与<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(x \cdot y\)</span></p>
<h3 id="或">或</h3>
<p><code>或</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x或y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>用上面的例子来说，<code>或</code>就是爸爸<strong>或</strong>妈妈同意了，就算是通过了。</p>
<p>同样地，符号表示如下：<span class="math inline">\(x\)</span>或<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(x + y\)</span></p>
<h3 id="非">非</h3>
<p><code>非</code>和上面的<code>与</code>，<code>或</code>有点不一样，真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">非x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
</tbody>
</table>
<p><code>非</code>其实就是对<code>x</code>去相反的值，从字面意思也可以理解。</p>
<p>符号表示如下：非<span class="math inline">\(x\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(\overline{x}\)</span></p>
<h3 id="与非">与非</h3>
<p><code>与非</code>的字面意思是<code>与</code>运算和<code>非</code>运算的结合。</p>
<p><code>与非</code>的真值表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">x</th>
<th style="text-align: center;">y</th>
<th style="text-align: center;">x与非y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
</tbody>
</table>
<p><code>与非</code>就是对<code>与</code>计算出来的结果，再做<code>非</code>计算。其符号表示如下：<span class="math inline">\(x\)</span>与非<span class="math inline">\(y\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\(\overline{x \cdot y}\)</span></p>
<p>这里把<code>与非</code>单独拿出来讲，是因为在电路中，我们可以用一个<code>与非</code>组件，构造出其余所有的组件。这样我们只需要弄懂一个电路图即可。我们这节课的主旨是搞明白，如何从用电路表达布尔逻辑，至于电路的效率等方面，则是硬件工程师们考虑的内容了。其实学习就是这样，我们需要抓住主线，明确目的。如果我们陷入布尔逻辑或者电路图的细节中不可自拔，那就是路走偏了。</p>
<h2 id="逻辑电路">逻辑电路</h2>
<blockquote>
<p>逻辑电路是指完成逻辑运算的电路。这种电路，一般有若干个输入端和一个 或几个输出端，当输入信号之间满足某一特定逻辑关系时，电路就开通，有输 出;否则，电路就关闭，无输出。所以，这种电路又叫逻辑门电路，简称门电路。</p>
</blockquote>
<p>这段话来自百度百科，可能比较拗口，我们直接来看实现。</p>
<h3 id="与非门">与非门</h3>
<p><img src="/img/nand/01/nandimp.jpg" /></p>
<p>如图所示，<code>I1</code>，<code>I2</code>是输入，<code>NPN</code>是一个三极管（当<code>I1</code>或<code>I2</code>加电的时候，上下两端连通），我们用1表示有电，用0表示没电，那么只有当<code>I1</code>，<code>I2</code>都是1的时候，<code>Output</code>才是0。我们可以用真值表中的例子来验证一下。</p>
<p>为了简化表示，我们用如下的符号来表示与非门：</p>
<p><img src="/img/nand/01/nand.png" /></p>
<p>到这里我们迈出了第一步，我们用一个物理上真实存在的电路图，表示出了一种布尔运算逻辑。那么下面我们就用这个电路图来构造其余的电路图。</p>
<h3 id="非门">非门</h3>
<p>非门的实现如下：</p>
<p><img src="/img/nand/01/notimp.png" /></p>
<p>也就是我们只需要在电路图上把与非门的2个输入连起来，就可以得到一个非门：这个时候与非门的2个输入永远都是相等的，当2个输入都是1的时候，输出为0，当2个输入都是0的时候，输出为1。</p>
<p>非门的符号如下所示：</p>
<p><img src="/img/nand/01/not.png" /></p>
<h3 id="与门">与门</h3>
<p>类似地，与门的实现如下：</p>
<p><img src="/img/nand/01/andimp.png" /></p>
<p>符号表示如下：</p>
<p><img src="/img/nand/01/and.png" /></p>
<h3 id="或门">或门</h3>
<p>或门的实现如下：</p>
<p><img src="/img/nand/01/orimp.png" /></p>
<p>符号表示如下：</p>
<p><img src="/img/nand/01/or.png" /></p>
<h2 id="回顾">回顾</h2>
<p>这一节我们实现了用电路去表示基础的门电路。迈出了关键的一步，但是一直用画图的方式去表达电路也比较麻烦，下一节我们会简单学习一门<strong>硬件描述语言</strong>（HDL：hardware description language）来表示电路的实现方式，一步一步去抽象，实现更多的组件。从而构造出一个完整的电脑。</p>
<p>再聊一个题外话：抽象。抽象是软件工程师很重要的一个技能。在这里，我们用<code>或非门</code>构造出了<code>非门</code>，<code>与门</code>，<code>或门</code>，那么我们可以把构造的过程理解成一个抽象的过程，构造出的门电路可以直接供我们使用，而不必每次去画几个或非门，然后把他们连起来。当然目前的门电路比较简单，我们的感知不是很强烈，如果我们构造了一个由几十个或非门构造出的<code>某门</code>，那么抽象就显得尤为重要了。其实平时写代码也是如此，我们应该把公用的部分，抽象出一个模块或者一个工具类。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——时序逻辑</title>
    <url>/2022/01/12/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h2 id="时钟">时钟</h2>
<p>这里的时钟通常是指时钟脉冲。如果没有时钟脉冲，CPU就是静态的，可以简单理解为给定输入，给出输出，没有什么动力可以驱动CPU做下一步的事情，我们需要手动改变输入，这时候的CPU就像是一个计算器，或者算盘一样。</p>
<p>时钟脉冲是CPU的心脏，给了CPU动力去取下一条指令并执行。</p>
<p>时钟脉冲的逻辑其实就是振荡器，这里不再赘述，可以看《穿越计算机的迷雾》</p>
<span id="more"></span>
<h2 id="边沿触发器">边沿触发器</h2>
<p>有时候电路的输出会出现空翻的现象，也就是CPU在计算的过程中，输出会有中间状态。这时候可以引入边沿触发器解决这个问题。</p>
<p><img src="/images/0cc303b6-669d-4374-974b-23697d7af879.png" /></p>
<p>上图中，当控制位为0的时候，前面的触发器接收输入，并保存，后面的触发器保持不变，整体输出不变；只有当控制位从0变成1的时候，后面的触发器接收前面触发器的输入并保存，这时前面触发器是保持不变的，整体处于稳定状态；当控制位处于1的时候，前面的触发器不接受输入，整体也处于稳定状态。所以只有当控制位从0变成1的时候才会导致整体输出的改变。我们把这个触发器叫做上升沿触发器。</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.zhihu.com/question/21981280">CPU为什么需要时钟？</a></p>
<p><a href="https://blog.csdn.net/weixin_44395686/article/details/105318472">为什么需要时钟脉冲</a></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——机器语言</title>
    <url>/2022/01/12/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E6%9C%BA%E5%99%A8%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="计算机体系结构">计算机体系结构</h2>
<p>这是一个老生常谈的问题，主要包括CPU，内存，输入和输出。</p>
<p>其中内存又可以进一步划分为指令区和数据区；CPU则包含了ALU和寄存器，寄存器进一步可以分为数据寄存器，地址寄存器，通用寄存器；输入可以来自键盘，鼠标，硬盘等，输出也可以是显示器，内存，硬盘等。</p>
<p><img src="/images/CtCn_TTL5q1CXeqsZVsTxTs8ZIZUCk7CBIxoVmROBwk.png" /></p>
<span id="more"></span>
<p>这里其实就可以明白计算机所能做的事情了，概括一下的话也很简单，CPU从内存取指令指定，把结果输出，不断循环。</p>
<p>再细分一下，主要包括下面几件事：</p>
<ul>
<li>内存的加载：加指令和数据</li>
<li>寄存器的加载：从内存取值</li>
<li>ALU的计算：从内存或者寄存器读取数据，计算后回写结果</li>
</ul>
<h2 id="hack-computer规范">Hack Computer规范</h2>
<ul>
<li>是一个16位的计算机</li>
<li>内存地址为15位宽，可以最多存储 <span class="math inline">\(2^{15} = 32K\)</span> 字（16位，1字 = 2字节）的数据</li>
<li>指令存在ROM中，数据存在RAM中</li>
<li>有2个寄存器，A和D：
<ul>
<li>A是通用寄存器，可以存储数据和地址</li>
<li>D是数据寄存器，只能存储数据</li>
</ul></li>
<li>对内存操作时，默认地址在A寄存器中</li>
<li>取指令时，默认的地址也在A寄存器中</li>
</ul>
<h2 id="汇编指令">汇编指令</h2>
<p>我们把Hack Computer的指令抽象成这种结构：<code>dest = comp;jump</code></p>
<p>这种结构很好的表述了下面三个问题：</p>
<ol type="1">
<li><code>comp</code> 代表要计算什么</li>
<li><code>dest</code> 代表计算后的值存储到什么地方</li>
<li><code>jump</code> 代表下一步到哪里取指令，也就是下一步要做什么</li>
</ol>
<p>这里也就把上面CPU能做的事情做了一个抽象，有时候我们不需要输出，那么<code>dest</code> 可以为空，当<code>dest</code> 为空的时候，可以不需要<code>=</code> ，很多时候也不需要跳转，按顺序执行指令即可，那么这时候<code>jump</code> 可以为空，同时也省略<code>;</code> 。</p>
<p>二进制格式如下：</p>
<p><img src="/images/qQjju5YROTQYX4aMHAPGVsnsEKu2CTFvvXuBMJfjZI4.png" /></p>
<p>左边第一位为1，表示是一个C指令，<code>dest = comp;jump</code> 就是C指令的格式，与之对应的还有A指令，A指令专门为A寄存器加载数据，可以理解为一种特殊的C指令。</p>
<p>紧接着的2位没有使用，接下来的<code>a</code> 和<code>c1~c6</code> 为comp部分，代表要计算什么，其实就是ALU的功能。</p>
<p><img src="/images/mhfCzY7RqZMzHI4dNCX3xS132ooezAVY2w0rptxsO0o.png" /></p>
<p>上表是对comp指令的表述，我们可以对比一下看看ALU：</p>
<p><img src="/images/FsiBDKzaRj826H5Mqv7PyPb13BgJOoI8ql11maMVkGQ.png" /></p>
<p>不难发现，其实<code>c1~c6</code> 就代表了ALU中的控制位，<code>c</code> 也就是control的意思，<code>a</code> 则表示操作数是A寄存器还是内存，M在这里代表内存的意思，其地址存在A寄存器。</p>
<p>dest部分表示结果要存在哪里，含义如下表所示：</p>
<p><img src="/images/9ceAG_5t89N0PgiukSkbxs_moUvszjIMmFqXEsRZoXM.png" /></p>
<p> </p>
<p>最后是jump部分，这里表示下一段指令怎么取：</p>
<p><img src="/images/TSoo8Uu-Vk_Iyf6p7SHn3V1rFzXy9wiPu189j7nYzEI.png" /></p>
<p>以上就是C指令的全部内容，那么A指令是用来为A寄存器设置值的，是一种特殊的C指令，不过我们这边做了简化处理，我们用<code>@value</code> 来表示。</p>
<h3 id="其他">其他</h3>
<p><strong>I/O: </strong> <code>@SCREEN</code> 和<code>@KBD</code> 被预定义RAM地址16384(0x4000)和24576(0x6000)，分别是屏幕和键盘的内存映像的基地址。可以发现这是2个A指令，其实就是对A寄存器赋值，后面对内存操作的时候其实和对应I/O设备的内存映像做交互。</p>
<p><strong>变量：</strong> 汇编也支持定义变量，用<code>@variable</code> 的形式，编译的时候编译器会用具体的内存地址替换，这里不再展开，真正是不会生成任何机器代码的，也叫做”伪指令“。</p>
<h3 id="一些例子">一些例子</h3>
<p>乘法程序：计算存储在内存地址R0和R1中的乘积，存到R2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@i</span><br><span class="line">M=1             // i = 1</span><br><span class="line">@result</span><br><span class="line">M=0             // result = 0</span><br><span class="line">    (LOOP)</span><br><span class="line">    @i</span><br><span class="line">    D=M             // D = i</span><br><span class="line">    @R1</span><br><span class="line">    D=D-M           // D = i - M[R1]</span><br><span class="line">    @END            // A = &amp;END</span><br><span class="line">    D;JGT</span><br><span class="line">    @R0</span><br><span class="line">    D=M             // D = M[R0]</span><br><span class="line">    @result</span><br><span class="line">    M=D+M           // result += M[R0]</span><br><span class="line">    @i</span><br><span class="line">    M=M+1           // i++</span><br><span class="line">@LOOP</span><br><span class="line">0;JMP</span><br><span class="line">    (END)</span><br><span class="line">    @result</span><br><span class="line">    D=M</span><br><span class="line">    @R2</span><br><span class="line">    M=D</span><br></pre></td></tr></table></figure>
<p>I/O程序：检测键盘的输入，按下任意键时，屏幕主键变黑(从第一个像素点开始变黑)，松开时清屏：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SCREEN</span><br><span class="line">D=A</span><br><span class="line">@position</span><br><span class="line">M=D</span><br><span class="line">(start)</span><br><span class="line">    @KBD</span><br><span class="line">    D=M</span><br><span class="line">    @black</span><br><span class="line">    D;JNE</span><br><span class="line">    @white</span><br><span class="line">    D;JEQ</span><br><span class="line">(black)</span><br><span class="line">    @position</span><br><span class="line">    D=M</span><br><span class="line">    @24575</span><br><span class="line">    D=D-A</span><br><span class="line">    @start</span><br><span class="line">    D;JGT</span><br><span class="line">    @position</span><br><span class="line">    M=M+1</span><br><span class="line">    A=M-1</span><br><span class="line">    M=0</span><br><span class="line">    M=!M</span><br><span class="line">    @start</span><br><span class="line">    0;JMP</span><br><span class="line">(white)</span><br><span class="line">    @position</span><br><span class="line">    D=M</span><br><span class="line">    @SCREEN</span><br><span class="line">    D=D-A</span><br><span class="line">    @start</span><br><span class="line">    D;JLT</span><br><span class="line">    @position</span><br><span class="line">    M=M-1</span><br><span class="line">    A=M+1</span><br><span class="line">    M=0</span><br><span class="line">    @start</span><br><span class="line">    0;JMP</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>从零构造一台计算机——硬件模拟器</title>
    <url>/2021/08/03/%E4%BB%8E%E9%9B%B6%E6%9E%84%E9%80%A0%E4%B8%80%E5%8F%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
    <content><![CDATA[<p>这里介绍一下Nand2Tetris课程里面用到的硬件模拟器的用法，可以在<a href="https://www.nand2tetris.org/software">这里</a>找到下载方式。</p>
<h2 id="hdl语法">HDL语法</h2>
<p>假如我们要构建一个<strong>非门</strong>，这时候我们需要创建一个文件，文件名为：<code>Not.hdl</code>，内容如下: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// This file is part of www.nand2tetris.org</span><br><span class="line">// and the book &quot;The Elements of Computing Systems&quot;</span><br><span class="line">// by Nisan and Schocken, MIT Press.</span><br><span class="line">// File name: projects/01/Not.hdl</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Not gate:</span><br><span class="line"> * out = not in</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">CHIP Not &#123;</span><br><span class="line">    IN in;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=in, b=in, out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<p>以<code>//</code>开头，或者在<code>/** **/</code>之间的是注释，这个和主流的编程语言一致。上面<code>/** **/</code>之间的是<code>Not</code>的描述。</p>
<p><code>CHIP</code>关键字定义了组件的名称，<code>IN</code>定义了组件的输入端，<code>OUT</code>定义了组件的输出，<code>PARTS</code>下面是具体的实现。</p>
<p>我们来具体看实现：</p>
<p><code>Nand(a=in, b=in, out=out);</code>的意思是<code>Nand</code>（与非门，默认提供）的输入端<code>a</code>, <code>b</code>作为<code>Not</code>的输入<code>in</code>，<code>Nand</code>的输出<code>out</code>作为<code>Not</code>的输出<code>out</code>。</p>
<p>当我们构建完<code>Not</code>的时候，我们就可以把他作为组件在后续的代码中使用了。</p>
<p>关于课程中<a href="https://www.nand2tetris.org/project01">project1</a>的其他组件以及对应的功能描述，可以去参考网站的资料，我已经写完并且上传到<a href="https://github.com/Kaiux/nand2tetris">github</a>，可以供大家参考。</p>
<h2 id="硬件模拟器">硬件模拟器</h2>
<p>这里的硬件模拟器是java写的，所以我们首先需要安装并配置jre，这里不再赘述。配置完java之后，运行平台的脚本文件即可。例如mac运行<code>HardwareSimulator.sh</code>，windows运行<code>HardwareSimulator.bat</code>即可。</p>
<p>打开后界面如下所示：</p>
<p><img src="/img/nand/00/HardwareSimulator.png" /></p>
<p>这时候我们点击<code>File -&gt; Load Chip</code>或者下面的第一个图标来加载一个组件。这时候我们可以改变<code>Input pins</code>中输入的值，然后点击<code>Run -&gt; Single Step</code>或者下面对应的图标去单步执行，执行完之后我们可以在<code>Output pins</code>中看到输出。</p>
<p>为了验证我们写的程序是否正确，我们可以使用压缩包中提供的测试文件来测试我们的程序：测试文件以<code>.tst</code>结尾，例如<code>Not.hdl</code>对应的测试文件就是<code>Not.tst</code>。然后我们可以点击<code>File -&gt; LoadScript</code>或者对应的图标来加载测试测试脚本文件。</p>
<p>加载完成之后，可以在右侧看到脚本文件的具体内容，同样的，我们也可以点击<code>Run -&gt; Single Step</code>来单步执行测试脚本中的测试代码，或者<code>Run -&gt; Run</code>来执行全部的测试代码。</p>
<p>如果执行成功，我们可以在最下方看到运行成功的提示，否则会给出对应的报错。如下所示：</p>
<p><img src="/img/nand/00/HardwareSimulator-success.png" /></p>
<h2 id="总结">总结</h2>
<p>到这里为止，我们了解了一些基础的逻辑电路，并且用<code>HDL</code>描述了出来。使用硬件模拟器的好处是方便我们调试，验证逻辑是否正确，也不用手动去焊接电路。</p>
<p>课程中用到的硬件模拟器是以学习为目的的，是为了帮助我们了解计算机底层的电路结构。我这里也没有介绍的面面俱到，仅仅是介绍了最基本的用法。关于更详细的使用方式我们可以去查阅网站中的资料。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hex</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Scala的ClassTag</title>
    <url>/2019/06/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Scala%E7%9A%84ClassTag/</url>
    <content><![CDATA[<p>Scala官方文档中对于<code>ClassTag</code>的定义如下：</p>
<blockquote>
<p><code>ClassTag[T]</code>保存着在运行时被JVM擦除的类型<code>T</code>的信息。当我们在运行时想获得被实例化的<code>Array</code>的类型信息的时候，这个特性会比较有用。</p>
</blockquote>
<p>下面请看一个具体的场景：</p>
<h2 id="场景">场景</h2>
<p>假定有一个<code>Map[String, Any]</code>，给定一个指定的key，我们需要检查Map中是否存在该key对应的value，如果存在，则优雅地返回这个值。看起来很简单，下面让我们来实现它，并且逐渐理解<code>ClassTag</code>。</p>
<span id="more"></span>
<h2 id="解决方案一">解决方案一</h2>
<p>我们的第一次尝试如下所示：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line">    <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">    <span class="comment">/* 下面注释的代码将会不通过编译</span></span><br><span class="line"><span class="comment">     * Any不能被当时Int使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//val number:Int = myMap(&quot;Number&quot;)</span></span><br><span class="line">    <span class="comment">//println(&quot;number is &quot; + number)</span></span><br><span class="line">    <span class="comment">//使用类型转换，可以通过编译</span></span><br><span class="line">    <span class="keyword">val</span> number: <span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">Int</span>]</span><br><span class="line">    println(<span class="string">&quot;number  is &quot;</span> + number)</span><br><span class="line">    <span class="comment">//下面的代码将会抛出ClassCastException</span></span><br><span class="line">    <span class="keyword">val</span> greeting: <span class="type">String</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">String</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number  is <span class="number">1</span></span><br><span class="line"><span class="type">Exception</span> in thread <span class="string">&quot;main&quot;</span> java.lang.<span class="type">ClassCastException</span>: java.lang.<span class="type">Integer</span> cannot be cast to java.lang.<span class="type">String</span></span><br><span class="line">	at learnscala.<span class="type">Test</span>$.main(<span class="type">Test</span>.scala:<span class="number">25</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>.main(<span class="type">Test</span>.scala)</span><br></pre></td></tr></table></figure>
<p>上面的代码有几个很显然的问题：</p>
<p>首先，当我们把Any直接当成Int来使用的时候，编译器是不会通过的：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这将不会通过编译</span></span><br><span class="line"><span class="keyword">val</span> number:<span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>编译器看起来没有什么错误，但是问题在于，我们没有办法使用Map中值的具体类型。换句话说，如果我们只是把值的类型设置成Any我们没办法受益于Scala提供的类型系统，所以我们需要修改代码。</p>
<p>为了通过编译，我们使用了如下的类型转换把获取的值变成了Int类型：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number:<span class="type">Int</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">Int</span>]</span><br></pre></td></tr></table></figure>
<p>这种做法虽然能有效果，但是当我们尝试转换一个不相关的类型的时候，<code>asInstanceOf</code>会抛出一个<code>ClassCastException</code>异常。</p>
<p>所以下面这行代码，会在运行时抛出异常，因为我们试图转换一个Int值为String。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> greeting:<span class="type">String</span> = myMap(<span class="string">&quot;Number&quot;</span>).asInstanceOf[<span class="type">String</span>]</span><br></pre></td></tr></table></figure>
<p>我们又引入了一个新的问题。</p>
<p>就算我们使用Map的<code>get()</code>方法，编译器还是不会通过，因为<code>Option[Any]</code>也没有办法当成<code>Option[Int]</code>来使用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的代码将不会通过编译</span></span><br><span class="line"><span class="keyword">val</span> number:<span class="type">Option</span>[<span class="type">Int</span>] = myMap.get(<span class="string">&quot;Number&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>你可能会想什么谁的代码里面会使用<code>Map[String, Any]</code>，这显然不是一个好的设计。但是我们先忽略这一点，并假设这个结构确实存在，下面我们回到这个问题。</p>
<p>使用<code>asInstanceOf</code>显然也不是一个好的方案，处理<code>ClassCastException</code>的办法之一是使用<code>try/catch</code>，但是这个方案并不是一个可靠并且优雅的方案，所以我们并不会采用。</p>
<h2 id="解决方案二">解决方案二</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getValueFromMap for the Int, String and Animal</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForInt</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]):<span class="type">Option</span>[<span class="type">Int</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">Int</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForString</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]: <span class="type">Option</span>[<span class="type">String</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">String</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMapForAnimal</span></span>(key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]: <span class="type">Option</span>[<span class="type">Animal</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">Animal</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMapForInt(<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMapForInt(<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMapForString(<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMapForString(<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMapForAnimal(<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMapForAnimal(<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br></pre></td></tr></table></figure></p>
<p>现在我们使用<code>getValueFromMapForXXX</code>方法来获取Map中<code>XXX</code>类型的值，从而避免了<code>ClassCastException</code>。</p>
<p>虽然解决了之前的问题，但是现在的这个解决方案任然不够好，因为，当我们增加一个新的类型的时候，就要提供一个新的<code>getValueFromMapForXXX</code>方法。</p>
<h2 id="解决方案三">解决方案三</h2>
<p>我们尝试使用类型参数来解决之前方案中<code>getValueFromMapForXXX</code>方法的可扩展性不足的问题。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>现在我们只有一个<code>getValueFromMap[T]</code>的方法，它的参数和之前的版本一样，但是现在需要传入一个类型参数<code>T</code>。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// 注意，这里开始出现问题了</span></span><br><span class="line">  <span class="comment">// 现在编译器不会报错，因为所有的都发生在运行时</span></span><br><span class="line">  <span class="comment">// 即使getValueFromMap 返回的是 Option[String]</span></span><br><span class="line">  <span class="keyword">val</span> greetingInt: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  <span class="comment">// 输出 Some(Hello World)</span></span><br><span class="line">  println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br><span class="line">  <span class="comment">// 这里会抛出 ClassCastException</span></span><br><span class="line">  <span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line">  <span class="comment">// 下面的不会打印</span></span><br><span class="line">  println(somevalue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greetingInt is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line"><span class="type">Exception</span> in thread <span class="string">&quot;main&quot;</span> java.lang.<span class="type">ClassCastException</span>: java.lang.<span class="type">String</span> cannot be cast to java.lang.<span class="type">Integer</span></span><br><span class="line">	at scala.runtime.<span class="type">BoxesRunTime</span>.unboxToInt(<span class="type">BoxesRunTime</span>.java:<span class="number">103</span>)</span><br><span class="line">	at scala.runtime.java8.<span class="type">JFunction1</span>$mcII$sp.apply(<span class="type">JFunction1</span>$mcII$sp.java:<span class="number">23</span>)</span><br><span class="line">	at scala.<span class="type">Option</span>.map(<span class="type">Option</span>.scala:<span class="number">163</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>$.main(<span class="type">Test</span>.scala:<span class="number">63</span>)</span><br><span class="line">	at learnscala.<span class="type">Test</span>.main(<span class="type">Test</span>.scala)</span><br></pre></td></tr></table></figure></p>
<p>现在，我们所需要做的就是调用<code>getValueFromMap[T]</code>方法，并且传递我们期待的类型和key，这样Map就可以返回我们需要的value。假如我们需要获取一个key为<code>Number</code>的Int类型的值，我们只需要这样做就可以了： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number1:<span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br></pre></td></tr></table></figure></p>
<p>到现在为止，我们看起来有了一个可靠的解决方案，因为我们只有一个<code>getValeFromMap</code>方法，并且我们也没有编译错误或者因为调用<code>asInstanceOf</code>不当而抛出的运行时<code>ClassCastException</code>异常。</p>
<p>在解决方案三中，我们解决了如下的几个问题：</p>
<ol type="1">
<li>用户需要更加了解他正在处理的类型，以减少不必要的运行时异常。</li>
<li>不需要<code>asInstanceOf</code>方法，如果key找到了，那么我们返回对应的<code>Some[value]</code>，否则，返回<code>None</code>。</li>
<li>可扩展性更好。</li>
</ol>
<p>到现在为止看起来还好，但是就像上面代码中所展示的，当用户不小心使用了错误的类型时，还是会有错误发生。</p>
<p>下面的代码虽然可以正常工作，但是并不符合逻辑： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尝试转换 Option[String] 为 Option[Int]</span></span><br><span class="line"><span class="keyword">val</span> greetingInt:<span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br></pre></td></tr></table></figure></p>
<p>Map中key为<code>Greeting</code>的value值为String类型，但是我们把它赋值给<code>Option[Int]</code>。惊人的是，下面的代码可以正常工作： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prints Some(Hello World)</span></span><br><span class="line">println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br></pre></td></tr></table></figure></p>
<p>但是当我们做一个Int操作的时候，会抛出异常。</p>
<p>如下所示的代码，会抛出<code>ClassCaseException</code>： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这行代码会抛出 ClassCastException 异常</span></span><br><span class="line"><span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 下面这行代码不会被打印</span></span><br><span class="line">println(somevalue)</span><br></pre></td></tr></table></figure></p>
<p>是不是<code>getValueFromMap[T]</code>需要捕获这个异常呢，我们的方法有问题吗？让我们继续看一下这个方法： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] =</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value:<span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>方法看起来是好的，我们所做的就是调用<code>get(key)</code>方法，并且检查value是不是T类型的，如果是，并且存在这个value，那么返回<code>Some(value: T)</code>,否则返回<code>None</code>。</p>
<p>所以，在上面的例子中，key为<code>Greeting</code>的value类型为<code>Int</code>,它应该检查<code>Some(value: Int)</code>是否是符合，显然，它应该返回<code>None</code>,因为key为<code>Greeting</code>的value的值为：<code>Hello World</code>，这是一个String而不是Int。但是我们使用了一个Int去接收。</p>
<p>问题在于，为什么下面这行代码没有捕捉到异常： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(value:<span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br></pre></td></tr></table></figure></p>
<p>运行时只会检查key有没有对应的value，而不会检查value是否是我们传递的<code>T</code>类型。因为运行时不包含我们传递的任何类型信息，在运行时，<code>T</code>已经被擦除不存在了。在JVM中被称为类型擦除。</p>
<p>所以我们最好可以保证，我们传递的类型<code>T</code>在运行时可以存在，去帮助运行时实现一些逻辑。下面我们引入<code>ClassTag</code>。</p>
<p>我们需要做的就是传递一个隐式的<code>ClassTag[T]</code>参数，如果我们需要获取Map中Int类型的value时，我们需要传递一个隐式的<code>ClassTag[Int]</code>参数。然后，当我们调用这个方法的时候，我们可以不传递隐式参数（参考Scala隐式转换），编译器会自动为我们提供。</p>
<p>所以现在的<code>getValuleFromMap</code>看起来是下面这样的： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>])(<span class="keyword">implicit</span> t:<span class="type">ClassTag</span>[<span class="type">T</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的方法也可以写成这样，效果是以一样的，但是看起来优雅一些： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span> : <span class="type">ClassTag</span>](key:<span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>方法调用不需要做任何改变，因为编译器会为我们提供隐式的<code>ClassTag[T]</code>参数。</p>
<h2 id="最终的方案">最终的方案</h2>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getValueFromMap</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValueFromMap</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](key: <span class="type">String</span>, dataMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]): <span class="type">Option</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">  dataMap.get(key) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(value: <span class="type">T</span>) =&gt; <span class="type">Some</span>(value)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">&quot;I am Animal&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> myMap: collection.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>] = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>)</span><br><span class="line">  <span class="comment">// returns Some(1)</span></span><br><span class="line">  <span class="keyword">val</span> number1: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + number1)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> numberNotExists: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Number2&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;number is &quot;</span> + numberNotExists)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// returns Some(Hello World)</span></span><br><span class="line">  <span class="keyword">val</span> greeting: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greeting)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> greetingDoesNotExists: <span class="type">Option</span>[<span class="type">String</span>] = getValueFromMap[<span class="type">String</span>](<span class="string">&quot;Greeting1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;greeting is &quot;</span> + greetingDoesNotExists)</span><br><span class="line">  println()</span><br><span class="line">  <span class="comment">// returns Some[Animal]</span></span><br><span class="line">  <span class="keyword">val</span> animal: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animal)</span><br><span class="line">  <span class="comment">// returns None</span></span><br><span class="line">  <span class="keyword">val</span> animalDoesNotExist: <span class="type">Option</span>[<span class="type">Animal</span>] = getValueFromMap[<span class="type">Animal</span>](<span class="string">&quot;Animal1&quot;</span>, myMap)</span><br><span class="line">  println(<span class="string">&quot;Animal is &quot;</span> + animalDoesNotExist)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// 现在这行代码没有问题，我们会得到None</span></span><br><span class="line">  <span class="keyword">val</span> greetingInt: <span class="type">Option</span>[<span class="type">Int</span>] = getValueFromMap[<span class="type">Int</span>](<span class="string">&quot;Greeting&quot;</span>, myMap)</span><br><span class="line">  <span class="comment">// prints None</span></span><br><span class="line">  println(<span class="string">&quot;greetingInt is &quot;</span> + greetingInt)</span><br><span class="line">  <span class="comment">// 没有 ClassCastException 并且返回 None</span></span><br><span class="line">  <span class="keyword">val</span> somevalue = greetingInt.map((x) =&gt; x + <span class="number">5</span>)</span><br><span class="line">  <span class="comment">// print None</span></span><br><span class="line">  println(somevalue)</span><br><span class="line">  println</span><br><span class="line">  <span class="comment">// other map with list</span></span><br><span class="line">  <span class="keyword">val</span> someMap = <span class="type">Map</span>(<span class="string">&quot;Number&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;Greeting&quot;</span> -&gt; <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Animal&quot;</span> -&gt; <span class="keyword">new</span> <span class="type">Animal</span>, <span class="string">&quot;goodList&quot;</span> -&gt; <span class="type">List</span>(<span class="string">&quot;good&quot;</span>, <span class="string">&quot;better&quot;</span>, <span class="string">&quot;best&quot;</span>))</span><br><span class="line">  <span class="comment">// gets the list from map</span></span><br><span class="line">  <span class="keyword">val</span> goodList: <span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">  <span class="comment">// prints the list</span></span><br><span class="line">  println(goodList)</span><br><span class="line">  println</span><br><span class="line">  println(<span class="string">&quot;Now let us try to get bad list&quot;</span>)</span><br><span class="line">  <span class="comment">// tries to get bad list from the map</span></span><br><span class="line">  <span class="keyword">val</span> badListNotExists: <span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;badList&quot;</span>, someMap)</span><br><span class="line">  <span class="comment">// prints None</span></span><br><span class="line">  println(badListNotExists)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码的输出如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">number is <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line">number is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greeting is <span class="type">Some</span>(<span class="type">Hello</span> <span class="type">World</span>)</span><br><span class="line">greeting is <span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> is <span class="type">Some</span>(<span class="type">I</span> am <span class="type">Animal</span>)</span><br><span class="line"><span class="type">Animal</span> is <span class="type">None</span></span><br><span class="line"></span><br><span class="line">greetingInt is <span class="type">None</span></span><br><span class="line"><span class="type">None</span></span><br><span class="line"></span><br><span class="line"><span class="type">Some</span>(<span class="type">List</span>(good, better, best))</span><br><span class="line"></span><br><span class="line"><span class="type">Now</span> let us <span class="keyword">try</span> to get bad list</span><br><span class="line"><span class="type">None</span></span><br></pre></td></tr></table></figure>
<p>现在，所有的问题都解决了，感谢Scala提供的<code>ClassTag</code>，帮我们在运行时获得我们传递的类型参数的信息。</p>
<h2 id="结论">结论</h2>
<p><code>ClassTag</code>对于我们在运行时获得类型参数<code>T</code>的信息是至关重要的，在多数情况下，它会提供许多便利。然而，它也有一些局限性，我们只能从<code>ClassTag</code>获取更高类型的信息，而不是参数类型更高的信息，这听起来有点绕，让我们看下面的例子。</p>
<p>如果我们使用下面的代码： <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> goodList:<span class="type">Option</span>[<span class="type">List</span>[<span class="type">Int</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">Int</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">    <span class="comment">// prints the list</span></span><br><span class="line">    println(goodList)</span><br></pre></td></tr></table></figure></p>
<p>替换：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> goodList:<span class="type">Option</span>[<span class="type">List</span>[<span class="type">String</span>]] = getValueFromMap[<span class="type">List</span>[<span class="type">String</span>]](<span class="string">&quot;goodList&quot;</span>, someMap)</span><br><span class="line">    <span class="comment">// prints the list</span></span><br><span class="line">    println(goodList)</span><br></pre></td></tr></table></figure>
<p>它仍然能正常工作，因为<code>ClassTag</code>仅仅在运行时提供更高的类型信息（List）不是参数类型的信息（Int、String）。这就是即使我们使用<code>getValueFromMap[List[Int]]</code>去接受key为<code>goodList</code>的value还能正常工作的原因。但是在有些情况下，我们需要在运行时获得参数的类型信息，这时候我们就需要使用<code>TypeTag</code>。</p>
<h2 id="参考">参考</h2>
<p><a href="https://dzone.com/articles/scala-classtag-a-simple-use-case" title="https://dzone.com/articles/scala-classtag-a-simple-use-case">How to Use the Scala ClassTag</a></p>
]]></content>
      <categories>
        <category>Programing</category>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>Scala</tag>
        <tag>ClassTag</tag>
      </tags>
  </entry>
</search>
